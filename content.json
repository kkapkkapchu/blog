{"meta":{"title":"깝깝츄의 개발일기","subtitle":"코딩왕","description":null,"author":"깝깝츄","url":"https://kkapkkapchu.github.io/blog"},"pages":[{"title":"Categories","date":"2017-08-02T06:23:25.000Z","updated":"2017-08-01T05:15:09.000Z","comments":true,"path":"categories/index.html","permalink":"https://kkapkkapchu.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-08-02T06:24:16.000Z","updated":"2017-08-01T05:15:09.000Z","comments":true,"path":"about/index.html","permalink":"https://kkapkkapchu.github.io/blog/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-08-02T06:24:16.000Z","updated":"2017-08-01T05:15:09.000Z","comments":true,"path":"tags/index.html","permalink":"https://kkapkkapchu.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"마우스 우클릭 이벤트와 좌클릭 이벤트 구분하기","slug":"20170828","date":"2017-08-28T07:22:44.000Z","updated":"2017-08-28T07:41:55.000Z","comments":true,"path":"2017/08/28/20170828/","link":"","permalink":"https://kkapkkapchu.github.io/blog/2017/08/28/20170828/","excerpt":"","text":"리액트에서 onTouchTap 을 사용했을 때 마우스 우클릭을 하면 처음에는 이벤트 호출이 안되는데,두 번째 우클릭부터는 onTouchTap 이벤트가 호출된다.(onClick 은 무조건 마우스 좌클릭만 호출된다.) 스크립트에서 마우스 우클릭과 좌클릭을 구분해야 할 때는 onClick 이나 onTouchTap 이 아닌 onMouseDown 이나 onMouseUp 이벤트를 사용해야 한다. 12345handleMouseUp = (event) =&gt; &#123; console.log(event.button) // 1: left, 2: right&#125;&lt;button onMouseUp=&#123;this.handleMouseUp&#125;&gt;마우스 클릭이벤트 구분&lt;/button&gt;","categories":[{"name":"Web","slug":"Web","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/"},{"name":"JavaScript","slug":"Web/JavaScript","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/JavaScript/"}],"tags":[{"name":"mouse","slug":"mouse","permalink":"https://kkapkkapchu.github.io/blog/tags/mouse/"},{"name":"click","slug":"click","permalink":"https://kkapkkapchu.github.io/blog/tags/click/"},{"name":"event","slug":"event","permalink":"https://kkapkkapchu.github.io/blog/tags/event/"}]},{"title":"propTypes 에 array 타입으로 지정할 때 array 안에 들어가는 값에 대한 타입 지정하기","slug":"20170825","date":"2017-08-25T04:22:54.000Z","updated":"2017-08-28T07:41:55.000Z","comments":true,"path":"2017/08/25/20170825/","link":"","permalink":"https://kkapkkapchu.github.io/blog/2017/08/25/20170825/","excerpt":"","text":"React 에서 속성의 타입을 정의할 때 propTypes를 사용하면 편하다.속성의 타입이 array 라면 배열 안의 값에 대한 타입도 arrayOf()로 지정할 수 있다. 아래 예시는 배열 안의 값의 타입을 숫자로 정의한 것이다.12// An array of a certain typeoptionalArrayOf: PropTypes.arrayOf(PropTypes.number), 배열 안의 값의 타입을 PropTypes.number 로 지정했기 때문에 숫자말고 다른 타입이 들어오면 에러가 난다.부모 컴포넌트에서 넘어오는 속성 값은 숫자로 된 배열이어야 한다. (ex) optionalArrayOf=[1, 2, 3]) 이외에도 아래와 같이 많은 타입을 정의할 수 있도록 제공된다. 제공되는 PropTypes1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import PropTypes from 'prop-types';MyComponent.propTypes = &#123; // You can declare that a prop is a specific JS primitive. By default, these // are all optional. optionalArray: PropTypes.array, optionalBool: PropTypes.bool, optionalFunc: PropTypes.func, optionalNumber: PropTypes.number, optionalObject: PropTypes.object, optionalString: PropTypes.string, optionalSymbol: PropTypes.symbol, // Anything that can be rendered: numbers, strings, elements or an array // (or fragment) containing these types. optionalNode: PropTypes.node, // A React element. optionalElement: PropTypes.element, // You can also declare that a prop is an instance of a class. This uses // JS's instanceof operator. optionalMessage: PropTypes.instanceOf(Message), // You can ensure that your prop is limited to specific values by treating // it as an enum. optionalEnum: PropTypes.oneOf(['News', 'Photos']), // An object that could be one of many types optionalUnion: PropTypes.oneOfType([ PropTypes.string, PropTypes.number, PropTypes.instanceOf(Message) ]), // An array of a certain type optionalArrayOf: PropTypes.arrayOf(PropTypes.number), // An object with property values of a certain type optionalObjectOf: PropTypes.objectOf(PropTypes.number), // An object taking on a particular shape optionalObjectWithShape: PropTypes.shape(&#123; color: PropTypes.string, fontSize: PropTypes.number &#125;), // You can chain any of the above with `isRequired` to make sure a warning // is shown if the prop isn't provided. requiredFunc: PropTypes.func.isRequired, // A value of any data type requiredAny: PropTypes.any.isRequired, // You can also specify a custom validator. It should return an Error // object if the validation fails. Don't `console.warn` or throw, as this // won't work inside `oneOfType`. customProp: function(props, propName, componentName) &#123; if (!/matchme/.test(props[propName])) &#123; return new Error( 'Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Validation failed.' ); &#125; &#125;, // You can also supply a custom validator to `arrayOf` and `objectOf`. // It should return an Error object if the validation fails. The validator // will be called for each key in the array or object. The first two // arguments of the validator are the array or object itself, and the // current item's key. customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123; if (!/matchme/.test(propValue[key])) &#123; return new Error( 'Invalid prop `' + propFullName + '` supplied to' + ' `' + componentName + '`. Validation failed.' ); &#125; &#125;)&#125;; 참고사이트: https://facebook.github.io/react/docs/typechecking-with-proptypes.html","categories":[{"name":"Web","slug":"Web","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/"},{"name":"JavaScript","slug":"Web/JavaScript","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/JavaScript/"},{"name":"React","slug":"Web/JavaScript/React","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/JavaScript/React/"}],"tags":[{"name":"propTypes","slug":"propTypes","permalink":"https://kkapkkapchu.github.io/blog/tags/propTypes/"}]},{"title":"keycode 라이브러리 사용시 키보드 오른쪽 keypad 숫자 가져오기","slug":"20170817","date":"2017-08-17T02:01:12.000Z","updated":"2017-08-28T07:41:55.000Z","comments":true,"path":"2017/08/17/20170817/","link":"","permalink":"https://kkapkkapchu.github.io/blog/2017/08/17/20170817/","excerpt":"","text":"keycode 라이브러리를 사용해서 값을 가져오고 숫자만 뽑아내기 위해서 정규식을 쓰는 경우가 있다.이때 조심해야 하는 경우가 있는데 바로 키보드 오른쪽의 keypad 로 입력했을 때이다. IE에서는 keypad 로 숫자 입력시 keycode 라이브러리로 값을 가져오면 “numpad 숫자” 로 찍힌다.그래서 숫자 정규식을 쓰려면 숫자만 뽑아내야 한다. 123456789import keycode from 'keycode'// 맨 뒤의 숫자만 가져오기// console.log(keycode(event)); // IE: \"numpad 숫자\", Others: \"숫자\"let keycodeStr = keycode(event).slice(-1);// 숫자만인지 체크하는 정규식const regNumber = /^[0-9]*$/;if ( !regNumber.test(keycodeStr) ) return;","categories":[{"name":"Web","slug":"Web","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/"},{"name":"JavaScript","slug":"Web/JavaScript","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/JavaScript/"},{"name":"library","slug":"Web/JavaScript/library","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/JavaScript/library/"}],"tags":[{"name":"IE","slug":"IE","permalink":"https://kkapkkapchu.github.io/blog/tags/IE/"},{"name":"keycode","slug":"keycode","permalink":"https://kkapkkapchu.github.io/blog/tags/keycode/"}]},{"title":"HTML 요소 동적으로 생성하고 속성(Attribute) 추가하기","slug":"20170813","date":"2017-08-13T07:18:27.000Z","updated":"2017-08-28T07:41:55.000Z","comments":true,"path":"2017/08/13/20170813/","link":"","permalink":"https://kkapkkapchu.github.io/blog/2017/08/13/20170813/","excerpt":"","text":"요소를 동적으로 생성하고 원하는 위치에 붙이기12345678// 요소 동적 생성let div = document.createElement(\"div\");// 원하는 위치에 붙인다document.body.appendChild(div);// React 에서는 요소를 붙이고 싶은 위치를 ref 로 잡아서도 가능 this.refs.test.appendChild(div); 동적으로 생성한 요소에 속성(Attribute) 추가하기1234567891011// 요소 동적 생성let div = document.createElement(\"div\");// 속성을 추가한다div.setAttribute(\"style\", \"width: 100%; height: 100%;\")// 원하는 위치에 붙인다document.body.appendChild(div);// React 에서는 요소를 붙이고 싶은 위치를 ref 로 잡아서도 가능 this.refs.test.appendChild(div); div.setAttribute(“style”, “width: 100%; height: 100%;”) 에서 첫 번째 인자가 추가할 속성의 이름이고,두 번째 인자가 추가할 속성의 값이다. 동적으로 생성한 요소에 이벤트 속성 추가하기12345678// 요소 동적 생성let a = document.createElement(\"a\");if (a.addEventListener) &#123; a.addEventListener('click', handler, false); &#125; else if (el.attachEvent) &#123; a.attachEvent('onclick', handler);&#125; onclick, onblur 와 같은 이벤트 속성을 추가하고 싶을 때는 setAttribute 가 아닌 addEventListener 로 하면 된다. 동적으로 생성한 요소 삭제하기12345&lt;ul id=\"myList\"&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt; 위의 예제처럼 ul, li 태그가 생성되었다고 할 때, li 태그를 지우고 싶으면 아래 예제처럼 하면 된다.12345678// 삭제할 요소의 상위(부모) 요소let myNode = document.getElementById(\"myList\");// 원하는 자식 요소만 지우기myNode.removeChild(myNode.childNodes[0]);// 자식 요소들 한번에 지우기myNode.innerHTML = '';","categories":[{"name":"Web","slug":"Web","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/"},{"name":"JavaScript","slug":"Web/JavaScript","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/JavaScript/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://kkapkkapchu.github.io/blog/tags/HTML/"}]},{"title":"CSS에서 calc 함수 중첩해서 쓰기","slug":"20170803","date":"2017-08-03T11:31:27.000Z","updated":"2017-08-04T00:31:59.000Z","comments":true,"path":"2017/08/03/20170803/","link":"","permalink":"https://kkapkkapchu.github.io/blog/2017/08/03/20170803/","excerpt":"","text":"Calc() function inside another calc() in CSS123456789// for Chrome, IE 9div&#123; width: calc(100% - (1% + 30px)); /* calc(1% + 30px) is nested inside calc() */&#125;// for Chromediv p&#123; width: calc(100% - calc(1% + 30px));&#125; 크롬은 둘 다 지원하지만 IE는 첫 번째만 지원한다.IE에서 calc 함수를 중첩으로 사용하려면 맨 앞에 calc로 한번만 감싸야한다. 이를 위해서 안의 중첩된 calc 글자를 없애주는 라이브러리(reduce-css-calc)도 있는거 같은데,이 라이브러리 안에서 쓰이는 “fs” 라이브러리가 없어진듯 하다… 그래서 못씀.. 아무튼 해결법은 calc를 한번만 사용하도록 식을 바꾸든지, 중첩된 calc 를 계산해서 숫자로 바꿔주는 라이브러리를 만들든지 찾든지 해야한다.","categories":[{"name":"Web","slug":"Web","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/"},{"name":"CSS","slug":"Web/CSS","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/CSS/"}],"tags":[{"name":"IE","slug":"IE","permalink":"https://kkapkkapchu.github.io/blog/tags/IE/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-07-24T06:31:27.000Z","updated":"2017-08-02T05:56:38.000Z","comments":true,"path":"2017/07/24/hello-world/","link":"","permalink":"https://kkapkkapchu.github.io/blog/2017/07/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Web","slug":"Web","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/"},{"name":"Hexo","slug":"Web/Hexo","permalink":"https://kkapkkapchu.github.io/blog/categories/Web/Hexo/"}],"tags":[]}]}